#version 430

layout(local_size_x = 32, local_size_y = 32) in;

struct FFTData
{
	vec2 height;
	vec2 choppyX;
	vec2 choppyZ;
};

layout(std430, binding = 0) buffer FFTBuffer
{
	FFTData fft_input[];
};

layout(binding = 0, rgba32f) uniform image2D mDisplacementMap;
layout(binding = 1, rgba8) uniform image2D mNormalMap;

uniform struct Data
{
	int gridSize;
	float choppyDisplacement;
	float normalY;
} data;

float getHeight(ivec2 coords)
{
	coords.x = clamp(coords.x, 0, data.gridSize - 1);
	coords.y = clamp(coords.y, 0, data.gridSize - 1);
	
	FFTData fftData = fft_input[coords.y * data.gridSize + coords.x];
	
	if(mod(coords.x + coords.y, 2) > 0.0)
	{
		fftData.height *= -1.0;
	}
	
	return fftData.height.x;
}

void main()
{
	ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
	FFTData fftData = fft_input[gl_GlobalInvocationID.y * data.gridSize + gl_GlobalInvocationID.x];
	
	if(mod(gl_GlobalInvocationID.x + gl_GlobalInvocationID.y, 2) > 0.0)
	{
		fftData.height *= -1.0;
		fftData.choppyX *= -1.0;
		fftData.choppyZ *= -1.0;
	}
	
	vec4 displacement;
	displacement.x = fftData.choppyX.x * data.choppyDisplacement;
	displacement.y = fftData.height.x;
	displacement.z = fftData.choppyZ.x * data.choppyDisplacement;
	displacement.w = 1.0;
	
	imageStore(mDisplacementMap, coords, displacement);
	
	float L = getHeight(coords - ivec2(1, 0));
	float R = getHeight(coords + ivec2(1, 0));
	float B = getHeight(coords - ivec2(0, 1));
	float T = getHeight(coords + ivec2(0, 1));
	
	vec3 normal;
	normal.x = L - R;
	normal.y = 2.0;//data.normalY;
	normal.z = B - T;
	normal = normalize(normal);
	normal = normal * 0.5 + 0.5;
	
	imageStore(mNormalMap, coords, vec4(normal, 0.0));
}