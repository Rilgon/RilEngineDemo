@DATA_START

#define MAX_POINT_LIGHTS 10

struct Material
{
	vec3 diffuse;
	vec3 specular;
	vec3 parameters;
};

struct DirectionalLight
{
	vec3 color;
	vec3 direction;
};

struct PointLight
{
	vec3 color;
	vec3 position;
	vec3 attenuation;
	vec3 parameters;
};

uniform DirectionalLight dirLight;
uniform PointLight pointLights[MAX_POINT_LIGHTS];
uniform int numActivePointLights;

@DATA_END

@FUNC_START

void blinnPhong(vec3 normal, vec3 view, vec3 lightDirection, out float diffuse, out float specular)
{
	diffuse =  max(dot(normal, lightDirection), 0.05);	
	specular = max(dot(reflect(-lightDirection, normal), view), 0.0);
}

void applyLighting(Material mat, vec3 normal)
{
	vec3 view = normalize(fsIn.viewVector);
	
	vec3 totalLight = vec3(0.0);
	float diffuse;
	float specular;
	
	blinnPhong(normal, view, dirLight.direction, diffuse, specular);
	totalLight += dirLight.color * (mat.diffuse * diffuse) + dirLight.color * (mat.specular * pow(specular, mat.parameters.x));
	
	for(int i = 0; i < numActivePointLights; i++)
	{
		PointLight pl = pointLights[i];
		
		vec3 dir = pl.position - fsIn.worldPos;
		float dist = length(dir);
		
		if(dist < pl.parameters.x)
		{
			dir = normalize(dir);	
			blinnPhong(normal, view, dir, diffuse, specular);	
			
			float atten = 1.0 / (pl.attenuation.x + pl.attenuation.y * dist + pl.attenuation.z * (dist * dist));		
			vec3 color = pl.color * (mat.diffuse * diffuse) + pl.color * (mat.specular * pow(specular, mat.parameters.x));
			
			totalLight += color * atten;	
		}
	}
	
	fragColor.rgb *= totalLight;
}

@FUNC_END

@SIGNATURE_START
	applyLighting(material, normal);
@SIGNATURE_END