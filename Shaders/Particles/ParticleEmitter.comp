#version 430

#define UPDATE_LOCAL_SIZE 64.0

layout(local_size_x = 1) in;

struct Particle
{
	vec3 position;
	float life;
	vec3 direction;
	float speed;
};

struct DrawArraysIndirectCommand 
{
	uint  count;
	uint  instanceCount;
	uint  first;
	uint  baseInstance;
};

struct DispatchIndirectCommand 
{
	uint groupX;
	uint groupY;
	uint groupZ;
};

struct PoolIndex
{
	uint index;
	uint poolSize;
	uint maxParticles;
	uint pad;
};

layout(std430, binding = 0) buffer ParticleIn
{
	DrawArraysIndirectCommand activeCommand;
	Particle particles[];
};

layout(std430, binding = 1) buffer ParticleOut
{
	DrawArraysIndirectCommand aliveCommand;
	Particle tmpParticlese[];
};

layout(std430, binding = 2) buffer ParticlePool
{
	Particle particlePool[];
};

layout(std430, binding = 3) buffer ParticlePoolHeader
{
	PoolIndex poolIndex;
};

layout(std430, binding = 4) buffer ComputeIndirect
{
	DispatchIndirectCommand dispatchCommand;
};

uniform int spawnCount;
uniform int resetFlag;

void main()
{	
	activeCommand.count = (resetFlag == 0 ? activeCommand.count : 0);
	aliveCommand.count = 0;

	if(activeCommand.count + spawnCount < poolIndex.maxParticles)
	{
		for(int i = 0; i < spawnCount; i++)
		{
			Particle p = particlePool[poolIndex.index];
			poolIndex.index = poolIndex.index + 1;
			poolIndex.index = poolIndex.index & (poolIndex.poolSize-1);
				
			uint activeIndex = activeCommand.count; //atomic?
			particles[activeIndex] = p;
			activeCommand.count = activeCommand.count + 1;
		}
	}
	dispatchCommand.groupX = uint(ceil(float(activeCommand.count) / UPDATE_LOCAL_SIZE));
}