#version 430

#define NUM_WAVES 64

layout (local_size_x = 32, local_size_y = 32) in;

layout (binding = 0, rgba32f) uniform image2D mDisplacementMap;
layout (binding = 1, rgba8) uniform image2D mNormalMap;

uniform struct Wave
{
	float frequency;
	float amplitude;
	vec2 direction;
	float phaseConstant;
} waves[NUM_WAVES];

uniform float totalTime;
uniform float steepness;
uniform int numWaves;

void main()
{
	ivec2 coords = ivec2(gl_GlobalInvocationID);
	
	vec4 displacement = vec4(0.0);
	for(int i = 0; i < numWaves; i++)
	{
		Wave wave = waves[i];
		float Qi = steepness / (wave.frequency * wave.amplitude * float(numWaves));
		float theta = wave.frequency * dot(wave.direction, vec2(coords)) + wave.phaseConstant * totalTime;
		
		displacement.x += Qi * wave.amplitude * wave.direction.x * cos(theta);
		displacement.z += Qi * wave.amplitude * wave.direction.y * cos(theta);
		displacement.y += wave.amplitude * sin(theta);		
	}
	
	imageStore(mDisplacementMap, coords, displacement);
	
	vec3 normal = vec3(0.0);
	for(int i = 0; i < numWaves; i++)
	{
		Wave wave = waves[i];
		float WA = wave.frequency * wave.amplitude;
		float Qi = steepness / (wave.frequency * wave.amplitude * float(numWaves));
		float theta = wave.frequency * dot(wave.direction, displacement.xz) + wave.phaseConstant * totalTime;
		
		normal.x += wave.direction.x * WA * cos(theta);
		normal.z += wave.direction.y * WA * cos(theta);
		normal.y += Qi * WA * sin(theta);
	}
	
	normal = vec3(-normal.x, 1.0 - normal.y, -normal.z);
	normal = normalize(normal);
	normal = normal * 0.5 + 0.5;
	
	imageStore(mNormalMap, coords, vec4(normal, 0.0));
}