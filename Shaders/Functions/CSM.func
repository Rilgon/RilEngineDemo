@DATA_START

#define NUM_SHADOW_MAPS 4

uniform int applyShadows;
uniform sampler2D mShadowMap[NUM_SHADOW_MAPS];
uniform mat4 lightViewOrthoMatrices[NUM_SHADOW_MAPS];
uniform vec4 shadowCascadeClipRanges;

@DATA_END

@FUNC_START

void applyCSM()
{
	if(applyShadows == 1)
	{
		int index = NUM_SHADOW_MAPS - 1;
		
		if(gl_FragCoord.z < shadowCascadeClipRanges.x)
		{
			index = 0;
		}
		else if(gl_FragCoord.z < shadowCascadeClipRanges.y)
		{
			index = 1;
		}
		else if(gl_FragCoord.z < shadowCascadeClipRanges.z)
		{
			index = 2;
		}
		
		vec3 shadowCoord = vec3(lightViewOrthoMatrices[index] * vec4(fsIn.worldPos, 1.0));
		shadowCoord = shadowCoord * 0.5 + 0.5;
		
		if(shadowCoord.z < 1.0)
		{
			float bias = 0.0001;
			float shadow = 0.0;
			
			float pass = shadowCoord.z - bias;
			
			shadow += texture(mShadowMap[index], shadowCoord.xy).r < pass ? 0.5 : 1.0;
			shadow += textureOffset(mShadowMap[index], shadowCoord.xy, ivec2(-1, -1)).r < pass ? 0.5 : 1.0;
			shadow += textureOffset(mShadowMap[index], shadowCoord.xy, ivec2(-1, +0)).r < pass ? 0.5 : 1.0;
			shadow += textureOffset(mShadowMap[index], shadowCoord.xy, ivec2(-1, +1)).r < pass ? 0.5 : 1.0;
			shadow += textureOffset(mShadowMap[index], shadowCoord.xy, ivec2(+0, -1)).r < pass ? 0.5 : 1.0;
			shadow += textureOffset(mShadowMap[index], shadowCoord.xy, ivec2(+0, +1)).r < pass ? 0.5 : 1.0;
			shadow += textureOffset(mShadowMap[index], shadowCoord.xy, ivec2(+1, -1)).r < pass ? 0.5 : 1.0;
			shadow += textureOffset(mShadowMap[index], shadowCoord.xy, ivec2(+1, +0)).r < pass ? 0.5 : 1.0;
			shadow += textureOffset(mShadowMap[index], shadowCoord.xy, ivec2(+1, +1)).r < pass ? 0.5 : 1.0;
			
			shadow *= 0.11111111;
			fragColor.rgb *= shadow;
		}
	}
}

@FUNC_END

@SIGNATURE_START
	applyCSM();
@SIGNATURE_END